use lambda_runtime::{handler_fn, Context, Error};
use serde::{Deserialize, Serialize};
use tracing::{info, Level};
use tracing_subscriber;

#[derive(Deserialize)]
struct Request {
    message: String,
}

#[derive(Serialize)]
struct Response {
    message: String,
}

async fn function_handler(event: Request, _: Context) -> Result<Response, Error> {
    // Log request
    info!("Received request: {}", event.message);

    let response_message = if event.message == "Marco" {
        "Polo"
    } else {
        "I didn't hear Marco!"
    };

    Ok(Response {
        message: response_message.to_string(),
    })
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // Set up tracing for logging
    tracing_subscriber::fmt()
        .with_max_level(Level::INFO)
        .init();

    let func = handler_fn(function_handler);

    lambda_runtime::run(func).await?;

    Ok(())
}
