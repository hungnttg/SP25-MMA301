use axum::{
    routing::{get},
    Router,
};
use serde::Serialize;
use std::net::SocketAddr;

#[derive(Serialize)]
struct CoinChange {
    amount: u32,
    coins: Vec<u32>,
}

fn greedy_coin_change(amount: u32) -> Vec<u32> {
    let coins = vec![25, 10, 5, 1];  // Coins: quarters, dimes, nickels, pennies
    let mut remaining = amount;
    let mut result = Vec::new();

    for coin in coins {
        while remaining >= coin {
            remaining -= coin;
            result.push(coin);
        }
    }

    result
}

async fn change_handler(dollars: u32, cents: u32) -> axum::Json<CoinChange> {
    let total_cents = dollars * 100 + cents;
    let coins = greedy_coin_change(total_cents);
    axum::Json(CoinChange {
        amount: total_cents,
        coins,
    })
}

#[tokio::main]
async fn main() {
    let app = Router::new()
        .route("/change/:dollars/:cents", get(change_handler));

    let addr = SocketAddr::from(([127, 0, 0, 1], 3000));
    println!("Listening on {}", addr);
    axum::Server::bind(&addr)
        .serve(app.into_make_service())
        .await
        .unwrap();
}

